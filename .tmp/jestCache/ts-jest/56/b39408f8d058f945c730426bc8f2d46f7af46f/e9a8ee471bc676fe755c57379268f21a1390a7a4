[["/Users/miguelgarcia/Developer/Knack/Challenge/src/app/controllers/__tests__/NodeAppController.test.ts",{"fileContent":"import container from \"../../dependency-injection\";\n\ndescribe(\"Controller TEST\", ()=>{\n\n    let nodeAppService: any;\n    let nodeAppController: any;\n\n    beforeAll(()=>{\n        nodeAppService = container.get(\"service.NodeAppService\")\n        nodeAppController = container.get(\"Controllers.NodeAppController\");\n    });\n\n    afterEach(()=>{\n        jest.clearAllMocks();\n    });\n\n    it('Should return true', async()=>{\n        jest.spyOn(nodeAppService,\"readNodeAppFile\").mockResolvedValueOnce({\n            _id:\"kmalñkdj\"\n        });\n        jest.spyOn(nodeAppService,\"cleanNodeApp\").mockResolvedValueOnce({\n            _id:\"kmalñkdj\"\n        });\n        jest.spyOn(nodeAppService,\"writeNodeAppFile\").mockResolvedValueOnce({\n            _id:\"kmalñkdj\"\n        });\n\n        const result = await nodeAppController.cleanNodeApp(\"file\");\n        expect(result).toBe(true);\n    });\n\n    it('Should return error', async()=>{\n        try {\n            jest.spyOn(nodeAppService,\"readNodeAppFile\").mockImplementationOnce(()=>{\n                return Promise.reject(\"readingNodeappfile\");\n            });\n            await nodeAppController.cleanNodeApp(\"file\");\n        } catch (error: any){\n            expect(error.message).toContain(\"readingNodeappfile\");\n        }\n    })\n\n})","resolvedModuleNames":["/Users/miguelgarcia/Developer/Knack/Challenge/src/app/dependency-injection/index.ts"]}],["/Users/miguelgarcia/Developer/Knack/Challenge/src/app/dependency-injection/index.ts",{"fileContent":"import { ContainerBuilder, YamlFileLoader} from \"node-dependency-injection\";\n\nconst container = new ContainerBuilder();\n\nconst loader = new YamlFileLoader(container);\n\nloader.load(`${__dirname}/application.yaml`);\n\nexport default container;","resolvedModuleNames":[]}],["/Users/miguelgarcia/Developer/Knack/Challenge/src/app/controllers/NodeAppController.ts",{"fileContent":"import NodeAppService from \"../../contexts/shared/infrastructure/services/NodeApp/NodeAppService\";\nimport container from '../dependency-injection';\n\nexport default class NodeAppController {\n    private service: NodeAppService;\n\n    constructor() {\n        this.service = container.get(\"service.NodeAppService\");\n    }\n\n    async cleanNodeApp( nodeApp : String): Promise<boolean> {\n        try {\n            const origNodeApp = await this.service.readNodeAppFile(nodeApp);\n            const appCleant = await this.service.cleanNodeApp(origNodeApp);\n            await this.service.writeNodeAppFile(appCleant);\n            return true;\n        } catch (error) {\n            //console.error(`ERROR cleaning nodeApp:${(error as any).message}.`);\n            return false;\n        }\n    }\n}","resolvedModuleNames":["/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/NodeAppService.ts","/Users/miguelgarcia/Developer/Knack/Challenge/src/app/dependency-injection/index.ts"]}],["/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/NodeAppService.ts",{"fileContent":"const fs = require('fs/promises');\n\nexport default class NodeAppService {\n    async readNodeAppFile( appFile: String):Promise<Object> {\n        try {\n            const fileUri = `${__dirname}/../../../resources/${appFile}`;\n            const json = await fs.readFile(fileUri);\n            const nodeAppOrig = JSON.parse(json);\n            return nodeAppOrig;\n        } catch (error: any) {\n            throw new Error(`ERROR reading file:${appFile}`);\n        }\n    }\n\n    async writeNodeAppFile (nodeApp: Object ):Promise<boolean> {\n        try {\n            await fs.writeFile(`${__dirname}/../../../resources/application-clean.json`, JSON.stringify(nodeApp), 'utf8');\n            return true;\n        } catch( error ) {\n            throw new Error(`ERROR writing file`)\n        }\n    }\n\n    async cleanNodeApp (nodeApp: any): Promise<Object> {\n        try {\n            let newversions: any[] = [];\n            let nodeAppNew = JSON.parse(JSON.stringify(nodeApp));\n            nodeApp.versions.map( (version: any) => {\n                let newVersion = JSON.parse(JSON.stringify(version));\n                let cleanObjects = this.cleanDuplicateObjects(version.objects, \"fields\", \"identifier\",\"key\");\n                let cleanScenes = this.cleanDuplicateObjects(version.scenes, \"views\", \"key\",\"key\");\n                newVersion.objects = cleanObjects;\n                newVersion.scenes = cleanScenes;\n                newversions.push(newVersion);\n            });\n            nodeAppNew.versions = newversions;\n            return nodeAppNew;\n        } catch (error) {\n            throw new Error(`ERROR cleaning nodeApp:${(error as any).message}.`);\n        }\n    }\n\n    cleanDuplicateObjects( objectArray:Array<any>, nestedAttribute: string, objectKey: string, nestedKey: string ):Array<Object>{\n        try {\n            let uniqueObjects = Array.from(new Set(objectArray.map(a => a[objectKey])))\n                .map(id => {\n                    return objectArray.find(a => a[objectKey] === id)\n                });\n            uniqueObjects.map( object => {\n                const newFields = this.cleanDuplicageFields(object[nestedAttribute], nestedKey);\n                object[nestedAttribute] = newFields;\n            });\n            return uniqueObjects;\n        } catch (error) {\n            throw new Error(`ERROR cleanDuplicates:${(error as any).message}.`);\n        }\n    }\n\n    cleanDuplicageFields( fieldArray:Array<any>, objectKey: string ):Array<any>{\n        let uniqueFields = Array.from(new Set(fieldArray.map(a => a[objectKey])))\n                .map(id => {\n                    return fieldArray.find(a => a[objectKey] === id)\n                })\n        return uniqueFields;\n    }\n}","resolvedModuleNames":[]}],["/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/__tests__/NodeAppService.test.ts",{"fileContent":"//import container from \"../../../../../../app/dependency-injection\";\nimport NodeAppService from \"../NodeAppService\";\n\njest.mock('fs', () => ({\n    promises: {\n      writeFile: jest.fn(),\n      readFile: jest.fn()\n    },\n  }));\n\ndescribe('Service Test',() => {\n    let nodeAppService: any;\n\n    beforeAll(()=>{\n        nodeAppService = new NodeAppService;\n    });\n\n    afterEach(()=>{\n        jest.clearAllMocks();\n    });\n\n    it('Should return an object for readfile', async ()=>{\n        const res = await nodeAppService.readNodeAppFile(\"mock_application.json\");\n        expect(res._id).toBe(\"61e8666b010a37023e3d99a3\");\n    });\n\n    it('Should return a unique object from simple object', ()=>{\n        const duplicatedObjectArray = [{key:\"1\", value:\"value1\"}, {key:\"1\", value:\"value2\"}];\n        const res = nodeAppService.cleanDuplicageFields(duplicatedObjectArray,\"key\");\n        expect(res[0].value).toBe(\"value1\");\n    });\n\n    \n    it('Should return unique items and objects for nested object',()=>{\n        const duplicatedObjectArray = [{key:\"1\", value:\"value1\"}, {key:\"1\", value:\"value2\"}];\n        const nestedArray = [{\n            parentID: \"1\", value:\"1\", objects:duplicatedObjectArray\n        },{parentID: \"1\", value:\"2\", objects:duplicatedObjectArray}];\n        const res = nodeAppService.cleanDuplicateObjects(nestedArray, \"objects\",\"parentID\",\"key\");\n        expect(res[0].value).toBe(\"1\");\n    });\n\n    it('Should cleanDuplicateObjects throw an error',()=>{\n        try {\n            jest.spyOn(nodeAppService,\"cleanDuplicateObjects\").mockImplementationOnce(()=>{\n                throw new Error(\"Error cleaningDuplicate\");\n            });\n            nodeAppService.cleanDuplicateObjects([], \"objects\",\"parentID\",\"key\");\n        } catch (error: any){\n            expect(error.message).toContain(\"Error cleaningDuplicate\");\n        }\n    });\n\n    it('Should cleanNodeApp throw an error',()=>{\n        try {\n            jest.spyOn(nodeAppService,\"cleanNodeApp\").mockImplementationOnce(()=>{\n                throw new Error(\"Error cleanNodeApp\");\n            });\n            nodeAppService.cleanNodeApp({});\n        } catch (error: any){\n            expect(error.message).toContain(\"Error cleanNodeApp\");\n        }\n    });\n\n    it('Should return a valid object', async ()=>{\n        const arrObjects = [{identifier:\"1\", fields:[{key:\"1\",value:\"1\"},{key:\"1\",value:\"2\"},{key:\"2\",value:\"2\"}]}];\n        const arrScenes = [{key:\"1\", views:[{key:\"1\",value:\"1\"},{key:\"1\",value:\"2\"},{key:\"2\",value:\"2\"}]}];;\n        const nodeApp = {id:\"nodeApp\", versions:[{objects:arrObjects, scenes:arrScenes}]};\n        const res = await nodeAppService.cleanNodeApp(nodeApp);\n        expect(res.id).toBe('nodeApp');\n        expect(res.versions[0].objects[0].identifier).toBe(\"1\");\n        expect(res.versions[0].objects[0].fields.length).toBe(2);\n    });\n\n    it('Should write a new object', async()=>{\n        const arrObjects = [{identifier:\"1\", fields:[{key:\"1\",value:\"1\"},{key:\"1\",value:\"2\"},{key:\"2\",value:\"2\"}]}];\n        const arrScenes = [{key:\"1\", views:[{key:\"1\",value:\"1\"},{key:\"1\",value:\"2\"},{key:\"2\",value:\"2\"}]}];;\n        const nodeApp = {id:\"nodeApp\", versions:[{objects:arrObjects, scenes:arrScenes}]};\n        const res = await nodeAppService.writeNodeAppFile(nodeApp);\n        expect(res).toBe(true);\n    });\n\n    it('Should return an error trying to save the file', async()=>{\n        try {\n        jest.spyOn(nodeAppService,\"writeNodeAppFile\").mockImplementationOnce(()=>{\n            return Promise.reject(\"writeNodeAppFile\");\n        });\n            await nodeAppService.writeNodeAppFile({});\n        } catch (error: any){\n            expect(error).toContain(\"writeNodeAppFile\");\n        }\n    })\n})","resolvedModuleNames":["/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/NodeAppService.ts"]}]]