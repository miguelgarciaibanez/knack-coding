d36fc1b23e20b1efeb7bb2a563890289
'use strict';

var YAMLException = require('./exception');
var TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'multi', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'representName', 'defaultStyle', 'styleAliases'];
var YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];
function compileStyleAliases(map) {
  var result = {};
  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }
  return result;
}
function Type(tag, options) {
  options = options || {};
  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new YAMLException('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options = options; // keep original options in case user wants to extend this type later
  this.tag = tag;
  this.kind = options['kind'] || null;
  this.resolve = options['resolve'] || function () {
    return true;
  };
  this.construct = options['construct'] || function (data) {
    return data;
  };
  this.instanceOf = options['instanceOf'] || null;
  this.predicate = options['predicate'] || null;
  this.represent = options['represent'] || null;
  this.representName = options['representName'] || null;
  this.defaultStyle = options['defaultStyle'] || null;
  this.multi = options['multi'] || false;
  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);
  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new YAMLException('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}
module.exports = Type;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJZQU1MRXhjZXB0aW9uIiwicmVxdWlyZSIsIlRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyIsIllBTUxfTk9ERV9LSU5EUyIsImNvbXBpbGVTdHlsZUFsaWFzZXMiLCJtYXAiLCJyZXN1bHQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInN0eWxlIiwiYWxpYXMiLCJTdHJpbmciLCJUeXBlIiwidGFnIiwib3B0aW9ucyIsIm5hbWUiLCJpbmRleE9mIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJkYXRhIiwiaW5zdGFuY2VPZiIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsInJlcHJlc2VudE5hbWUiLCJkZWZhdWx0U3R5bGUiLCJtdWx0aSIsInN0eWxlQWxpYXNlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ0eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TID0gW1xuICAna2luZCcsXG4gICdtdWx0aScsXG4gICdyZXNvbHZlJyxcbiAgJ2NvbnN0cnVjdCcsXG4gICdpbnN0YW5jZU9mJyxcbiAgJ3ByZWRpY2F0ZScsXG4gICdyZXByZXNlbnQnLFxuICAncmVwcmVzZW50TmFtZScsXG4gICdkZWZhdWx0U3R5bGUnLFxuICAnc3R5bGVBbGlhc2VzJ1xuXTtcblxudmFyIFlBTUxfTk9ERV9LSU5EUyA9IFtcbiAgJ3NjYWxhcicsXG4gICdzZXF1ZW5jZScsXG4gICdtYXBwaW5nJ1xuXTtcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlQWxpYXNlcyhtYXApIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChtYXAgIT09IG51bGwpIHtcbiAgICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBtYXBbc3R5bGVdLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgIHJlc3VsdFtTdHJpbmcoYWxpYXMpXSA9IHN0eWxlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBUeXBlKHRhZywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24gb3B0aW9uIFwiJyArIG5hbWUgKyAnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRPRE86IEFkZCB0YWcgZm9ybWF0IGNoZWNrLlxuICB0aGlzLm9wdGlvbnMgICAgICAgPSBvcHRpb25zOyAvLyBrZWVwIG9yaWdpbmFsIG9wdGlvbnMgaW4gY2FzZSB1c2VyIHdhbnRzIHRvIGV4dGVuZCB0aGlzIHR5cGUgbGF0ZXJcbiAgdGhpcy50YWcgICAgICAgICAgID0gdGFnO1xuICB0aGlzLmtpbmQgICAgICAgICAgPSBvcHRpb25zWydraW5kJ10gICAgICAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXNvbHZlICAgICAgID0gb3B0aW9uc1sncmVzb2x2ZSddICAgICAgIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIHRoaXMuY29uc3RydWN0ICAgICA9IG9wdGlvbnNbJ2NvbnN0cnVjdCddICAgICB8fCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YTsgfTtcbiAgdGhpcy5pbnN0YW5jZU9mICAgID0gb3B0aW9uc1snaW5zdGFuY2VPZiddICAgIHx8IG51bGw7XG4gIHRoaXMucHJlZGljYXRlICAgICA9IG9wdGlvbnNbJ3ByZWRpY2F0ZSddICAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudCAgICAgPSBvcHRpb25zWydyZXByZXNlbnQnXSAgICAgfHwgbnVsbDtcbiAgdGhpcy5yZXByZXNlbnROYW1lID0gb3B0aW9uc1sncmVwcmVzZW50TmFtZSddIHx8IG51bGw7XG4gIHRoaXMuZGVmYXVsdFN0eWxlICA9IG9wdGlvbnNbJ2RlZmF1bHRTdHlsZSddICB8fCBudWxsO1xuICB0aGlzLm11bHRpICAgICAgICAgPSBvcHRpb25zWydtdWx0aSddICAgICAgICAgfHwgZmFsc2U7XG4gIHRoaXMuc3R5bGVBbGlhc2VzICA9IGNvbXBpbGVTdHlsZUFsaWFzZXMob3B0aW9uc1snc3R5bGVBbGlhc2VzJ10gfHwgbnVsbCk7XG5cbiAgaWYgKFlBTUxfTk9ERV9LSU5EUy5pbmRleE9mKHRoaXMua2luZCkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24ga2luZCBcIicgKyB0aGlzLmtpbmQgKyAnXCIgaXMgc3BlY2lmaWVkIGZvciBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFMUMsSUFBSUMsd0JBQXdCLEdBQUcsQ0FDN0IsTUFBTSxFQUNOLE9BQU8sRUFDUCxTQUFTLEVBQ1QsV0FBVyxFQUNYLFlBQVksRUFDWixXQUFXLEVBQ1gsV0FBVyxFQUNYLGVBQWUsRUFDZixjQUFjLEVBQ2QsY0FBYyxDQUNmO0FBRUQsSUFBSUMsZUFBZSxHQUFHLENBQ3BCLFFBQVEsRUFDUixVQUFVLEVBQ1YsU0FBUyxDQUNWO0FBRUQsU0FBU0MsbUJBQW1CQSxDQUFDQyxHQUFHLEVBQUU7RUFDaEMsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUVmLElBQUlELEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDaEJFLE1BQU0sQ0FB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