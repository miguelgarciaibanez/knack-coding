24eec0ef1c1ac5ffe676f0fe37ff1117
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ServiceCircularReferenceException = _interopRequireDefault(require("./Exception/ServiceCircularReferenceException"));
var _PassConfig = _interopRequireDefault(require("./PassConfig"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var Compiler = /*#__PURE__*/function () {
  /**
   * @param {ContainerBuilder} container
   */
  function Compiler(container) {
    _classCallCheck(this, Compiler);
    this._container = container;
  }
  _createClass(Compiler, [{
    key: "run",
    value: function run() {
      try {
        if (!this._container.frozen) {
          this._loadExtensions();
          this._optimize();
          this._remove();
        }
      } catch (error) {
        if (error instanceof RangeError) {
          throw new _ServiceCircularReferenceException["default"]();
        }
        throw error;
      }
    }
    /**
     * @private
     */
  }, {
    key: "_loadExtensions",
    value: function _loadExtensions() {
      var _iterator = _createForOfIteratorHelper(this._container.extensions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var extension = _step.value;
          extension.load(this);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * @private
     */
  }, {
    key: "_optimize",
    value: function _optimize() {
      this._container._compilerPass.process(_PassConfig["default"].TYPE_BEFORE_OPTIMIZATION);
      this._container._compilerPass.process(_PassConfig["default"].TYPE_OPTIMIZE);
    }
    /**
     * @private
     */
  }, {
    key: "_remove",
    value: function _remove() {
      this._container._compilerPass.process(_PassConfig["default"].TYPE_BEFORE_REMOVING);
      this._container._compilerPass.process(_PassConfig["default"].TYPE_REMOVE);
      this._container._compilerPass.process(_PassConfig["default"].TYPE_AFTER_REMOVING);
    }
  }]);
  return Compiler;
}();
exports["default"] = Compiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9TZXJ2aWNlQ2lyY3VsYXJSZWZlcmVuY2VFeGNlcHRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9QYXNzQ29uZmlnIiwib2JqIiwiX19lc01vZHVsZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJGIiwicyIsIm4iLCJkb25lIiwiZSIsIl9lIiwiZiIsIlR5cGVFcnJvciIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJlcnIiLCJjYWxsIiwic3RlcCIsIm5leHQiLCJfZTIiLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsImFyciIsImxlbiIsImFycjIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDb21waWxlciIsImNvbnRhaW5lciIsIl9jb250YWluZXIiLCJydW4iLCJmcm96ZW4iLCJfbG9hZEV4dGVuc2lvbnMiLCJfb3B0aW1pemUiLCJfcmVtb3ZlIiwiZXJyb3IiLCJSYW5nZUVycm9yIiwiX2l0ZXJhdG9yIiwiZXh0ZW5zaW9ucyIsIl9zdGVwIiwiZXh0ZW5zaW9uIiwibG9hZCIsIl9jb21waWxlclBhc3MiLCJwcm9jZXNzIiwiVFlQRV9CRUZPUkVfT1BUSU1JWkFUSU9OIiwiVFlQRV9PUFRJTUlaRSIsIlRZUEVfQkVGT1JFX1JFTU9WSU5HIiwiVFlQRV9SRU1PVkUiLCJUWVBFX0FGVEVSX1JFTU9WSU5HIl0sInNvdXJjZXMiOlsiQ29tcGlsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9TZXJ2aWNlQ2lyY3VsYXJSZWZlcmVuY2VFeGNlcHRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0V4Y2VwdGlvbi9TZXJ2aWNlQ2lyY3VsYXJSZWZlcmVuY2VFeGNlcHRpb25cIikpO1xuXG52YXIgX1Bhc3NDb25maWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1Bhc3NDb25maWdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmICghaXQpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gaXQuY2FsbChvKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFtcInJldHVyblwiXSAhPSBudWxsKSBpdFtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgQ29tcGlsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtDb250YWluZXJCdWlsZGVyfSBjb250YWluZXJcbiAgICovXG4gIGZ1bmN0aW9uIENvbXBpbGVyKGNvbnRhaW5lcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21waWxlcik7XG5cbiAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ29tcGlsZXIsIFt7XG4gICAga2V5OiBcInJ1blwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBydW4oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIXRoaXMuX2NvbnRhaW5lci5mcm96ZW4pIHtcbiAgICAgICAgICB0aGlzLl9sb2FkRXh0ZW5zaW9ucygpO1xuXG4gICAgICAgICAgdGhpcy5fb3B0aW1pemUoKTtcblxuICAgICAgICAgIHRoaXMuX3JlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IF9TZXJ2aWNlQ2lyY3VsYXJSZWZlcmVuY2VFeGNlcHRpb25bXCJkZWZhdWx0XCJdKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9sb2FkRXh0ZW5zaW9uc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZEV4dGVuc2lvbnMoKSB7XG4gICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fY29udGFpbmVyLmV4dGVuc2lvbnMpLFxuICAgICAgICAgIF9zdGVwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBleHRlbnNpb24gPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICBleHRlbnNpb24ubG9hZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBfaXRlcmF0b3IuZigpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29wdGltaXplXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vcHRpbWl6ZSgpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5fY29tcGlsZXJQYXNzLnByb2Nlc3MoX1Bhc3NDb25maWdbXCJkZWZhdWx0XCJdLlRZUEVfQkVGT1JFX09QVElNSVpBVElPTik7XG5cbiAgICAgIHRoaXMuX2NvbnRhaW5lci5fY29tcGlsZXJQYXNzLnByb2Nlc3MoX1Bhc3NDb25maWdbXCJkZWZhdWx0XCJdLlRZUEVfT1BUSU1JWkUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbW92ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVtb3ZlKCkge1xuICAgICAgdGhpcy5fY29udGFpbmVyLl9jb21waWxlclBhc3MucHJvY2VzcyhfUGFzc0NvbmZpZ1tcImRlZmF1bHRcIl0uVFlQRV9CRUZPUkVfUkVNT1ZJTkcpO1xuXG4gICAgICB0aGlzLl9jb250YWluZXIuX2NvbXBpbGVyUGFzcy5wcm9jZXNzKF9QYXNzQ29uZmlnW1wiZGVmYXVsdFwiXS5UWVBFX1JFTU9WRSk7XG5cbiAgICAgIHRoaXMuX2NvbnRhaW5lci5fY29tcGlsZXJQYXNzLnByb2Nlc3MoX1Bhc3NDb25maWdbXCJkZWZhdWx0XCJdLlRZUEVfQUZURVJfUkVNT1ZJTkcpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDb21waWxlcjtcbn0oKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBDb21waWxlcjsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUUzQixJQUFJRSxrQ0FBa0MsR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBRXpILElBQUlDLFdBQVcsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUVqRSxTQUFTRCxzQkFBc0JBLENBQUNHLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFLFNBQVMsRUFBRUE7RUFBSSxDQUFDO0FBQUU7QUFFaEcsU0FBU0UsMEJBQTBCQSxDQUFDQyxDQUFDLEVBQUVDLGNBQWMsRUFBRTtFQUFFLElBQUlDLEVBQUUsR0FBRyxPQUFPQyxNQUFNLEtBQUssV0FBVyxJQUFJSCxDQUFDLENBQUNHLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLElBQUlKLENBQUMsQ0FBQyxZQUFZLENBQUM7RUFBRSxJQUFJLENBQUNFLEVBQUUsRUFBRTtJQUFFLElBQUlHLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixDQUFDLENBQUMs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