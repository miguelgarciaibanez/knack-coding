e4c1b9c3e5372644cfd93fa84041c621
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var PassConfig = /*#__PURE__*/function () {
  function PassConfig() {
    _classCallCheck(this, PassConfig);
  }
  _createClass(PassConfig, null, [{
    key: "TYPE_BEFORE_OPTIMIZATION",
    get:
    /**
     * @returns {string}
     */
    function get() {
      return 'beforeOptimization';
    }
    /**
     * @returns {string}
     */
  }, {
    key: "TYPE_OPTIMIZE",
    get: function get() {
      return 'optimize';
    }
    /**
     * @returns {string}
     */
  }, {
    key: "TYPE_BEFORE_REMOVING",
    get: function get() {
      return 'beforeRemoving';
    }
    /**
     * @returns {string}
     */
  }, {
    key: "TYPE_REMOVE",
    get: function get() {
      return 'remove';
    }
    /**
     * @returns {string}
     */
  }, {
    key: "TYPE_AFTER_REMOVING",
    get: function get() {
      return 'afterRemoving';
    }
    /**
     * @param {string} type
     * @returns {boolean}
     */
  }, {
    key: "isValidType",
    value: function isValidType(type) {
      return this.TYPE_BEFORE_OPTIMIZATION === type || this.TYPE_OPTIMIZE === type || this.TYPE_BEFORE_REMOVING === type || this.TYPE_REMOVE === type || this.TYPE_AFTER_REMOVING === type;
    }
  }]);
  return PassConfig;
}();
exports["default"] = PassConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJQYXNzQ29uZmlnIiwiZ2V0IiwiaXNWYWxpZFR5cGUiLCJ0eXBlIiwiVFlQRV9CRUZPUkVfT1BUSU1JWkFUSU9OIiwiVFlQRV9PUFRJTUlaRSIsIlRZUEVfQkVGT1JFX1JFTU9WSU5HIiwiVFlQRV9SRU1PVkUiLCJUWVBFX0FGVEVSX1JFTU9WSU5HIl0sInNvdXJjZXMiOlsiUGFzc0NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBQYXNzQ29uZmlnID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFzc0NvbmZpZygpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFzc0NvbmZpZyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFzc0NvbmZpZywgbnVsbCwgW3tcbiAgICBrZXk6IFwiVFlQRV9CRUZPUkVfT1BUSU1JWkFUSU9OXCIsXG4gICAgZ2V0OlxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdiZWZvcmVPcHRpbWl6YXRpb24nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVFlQRV9PUFRJTUlaRVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdvcHRpbWl6ZSc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUWVBFX0JFRk9SRV9SRU1PVklOR1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdiZWZvcmVSZW1vdmluZyc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJUWVBFX1JFTU9WRVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdyZW1vdmUnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiVFlQRV9BRlRFUl9SRU1PVklOR1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdhZnRlclJlbW92aW5nJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzVmFsaWRUeXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWRUeXBlKHR5cGUpIHtcbiAgICAgIHJldHVybiB0aGlzLlRZUEVfQkVGT1JFX09QVElNSVpBVElPTiA9PT0gdHlwZSB8fCB0aGlzLlRZUEVfT1BUSU1JWkUgPT09IHR5cGUgfHwgdGhpcy5UWVBFX0JFRk9SRV9SRU1PVklORyA9PT0gdHlwZSB8fCB0aGlzLlRZUEVfUkVNT1ZFID09PSB0eXBlIHx8IHRoaXMuVFlQRV9BRlRFUl9SRU1PVklORyA9PT0gdHlwZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFzc0NvbmZpZztcbn0oKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQYXNzQ29uZmlnOyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7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