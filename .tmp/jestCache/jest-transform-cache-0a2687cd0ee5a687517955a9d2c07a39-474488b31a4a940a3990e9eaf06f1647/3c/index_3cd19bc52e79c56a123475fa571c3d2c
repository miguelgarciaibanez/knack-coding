c4f7361d9a1320976132d820beab08b7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _PassConfig = _interopRequireDefault(require("../PassConfig"));
var _OptimizePass = _interopRequireDefault(require("./OptimizePass"));
var _RemovePass = _interopRequireDefault(require("./RemovePass"));
var _DecoratePass = _interopRequireDefault(require("./DecoratePass"));
var _ProcessMethodNotFoundException = _interopRequireDefault(require("../Exception/ProcessMethodNotFoundException"));
var _WrongCompilerPassTypeException = _interopRequireDefault(require("../Exception/WrongCompilerPassTypeException"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var CompilerPass = /*#__PURE__*/function () {
  /**
   * @param {ContainerBuilder} container
   */
  function CompilerPass(container) {
    _classCallCheck(this, CompilerPass);
    this._container = container;
    this.beforeOptimization = [];
    this.optimize = [];
    this.beforeRemoving = [];
    this.remove = [];
    this.afterRemoving = [];
  }
  /**
   * @param {string} type
   * @param {number} priority
   * @returns {number}
   */

  _createClass(CompilerPass, [{
    key: "_getCompilerPassPriorityNumber",
    value: function _getCompilerPassPriorityNumber(type, priority) {
      if (this[type][priority]) {
        return this._getCompilerPassPriorityNumber(type, priority + 1);
      }
      return priority;
    }
    /**
     * @param {*} compilerPass
     * @param {string} type
     * @param {number} priority
     */
  }, {
    key: "register",
    value: function register(compilerPass, type, priority) {
      if (typeof compilerPass.process !== 'function') {
        throw new _ProcessMethodNotFoundException["default"](compilerPass.constructor.name);
      }
      if (!_PassConfig["default"].isValidType(type)) {
        throw new _WrongCompilerPassTypeException["default"](type);
      }
      var arrayLevel = this._getCompilerPassPriorityNumber(type, priority);
      this[type][arrayLevel] = compilerPass;
    }
    /**
     * @param {string} type
     * @private
     */
  }, {
    key: "_checkAndAdd",
    value: function _checkAndAdd(type) {
      if (this._container._compilerPass[type].length === 0) {
        if (type === _PassConfig["default"].TYPE_BEFORE_OPTIMIZATION) {
          this.register(new _DecoratePass["default"](), type, 0);
        } else if (type === _PassConfig["default"].TYPE_OPTIMIZE) {
          this.register(new _OptimizePass["default"](), type, 0);
        } else if (type === _PassConfig["default"].TYPE_REMOVE) {
          this.register(new _RemovePass["default"](), type, 0);
        }
      }
    }
    /**
     * @param {string} type
     */
  }, {
    key: "process",
    value: function process(type) {
      this._checkAndAdd(type);
      this[type] = this[type].filter(function (i) {
        return i !== null;
      });
      var _iterator = _createForOfIteratorHelper(this[type]),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var compilerPass = _step.value;
          compilerPass.process(this._container);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }]);
  return CompilerPass;
}();
exports["default"] = CompilerPass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,