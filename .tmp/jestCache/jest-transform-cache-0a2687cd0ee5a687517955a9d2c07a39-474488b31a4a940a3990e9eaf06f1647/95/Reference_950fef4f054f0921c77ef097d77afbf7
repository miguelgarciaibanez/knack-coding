464074f41eedb4b3afecd52e8e97f4c0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var Reference = /*#__PURE__*/function () {
  /**
   * @param {string} id
   * @param {boolean} nullable
   */
  function Reference(id) {
    var nullable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    _classCallCheck(this, Reference);
    this._id = id;
    this._nullable = nullable;
  }
  /**
   * @returns {string}
   */

  _createClass(Reference, [{
    key: "id",
    get: function get() {
      return this._id;
    }
    /**
     * @returns {boolean}
     */
  }, {
    key: "nullable",
    get: function get() {
      return this._nullable;
    }
  }]);
  return Reference;
}();
var _default = Reference;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJSZWZlcmVuY2UiLCJpZCIsIm51bGxhYmxlIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiX2lkIiwiX251bGxhYmxlIiwiZ2V0IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJSZWZlcmVuY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG52YXIgUmVmZXJlbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG51bGxhYmxlXG4gICAqL1xuICBmdW5jdGlvbiBSZWZlcmVuY2UoaWQpIHtcbiAgICB2YXIgbnVsbGFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZmVyZW5jZSk7XG5cbiAgICB0aGlzLl9pZCA9IGlkO1xuICAgIHRoaXMuX251bGxhYmxlID0gbnVsbGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFJlZmVyZW5jZSwgW3tcbiAgICBrZXk6IFwiaWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJudWxsYWJsZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX251bGxhYmxlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWZlcmVuY2U7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IFJlZmVyZW5jZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUM7QUFFM0IsU0FBU0UsZUFBZUEsQ0FBQ0MsUUFBUSxFQUFFQyxXQUFXLEVBQUU7RUFBRSxJQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBVyxDQUFDLEVBQUU7SUFBRSxNQUFNLElBQUlDLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQztFQUFFO0FBQUU7QUFFeEosU0FBU0MsaUJBQWlCQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtFQUFFLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxLQUFLLENBQUNFLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFBRSxJQUFJRSxVQUFVLEdBQUdILEtBQUssQ0FBQ0MsQ0FBQyxDQUFDO0lBQUVFLFVBQVUsQ0FBQ0MsVUFBVSxHQUFHRCxVQUFVLENBQUNDLFVBQVUsSUFBSSxLQUFLO0lBQUVELFVBQVUsQ0FBQ0UsWUFBWSxHQUFHLElBQUk7SUFBRSxJQUFJLE9BQU8sSUFBSUYsVUFBVSxFQUFFQSxVQUFVLENBQUNHLFFBQVEsR0FBRyxJQUFJO0lBQUVoQixNQUFNLENBQUNDLGNBQWMsQ0FBQ1EsTUFBTSxFQUFFSSxVQUFVLENBQUNJLEdBQUcsRUFBRUosVUFBVSxDQUFDO0VBQUU7QUFBRTtBQUU1VCxTQUFTSyxZQUFZQSxDQUFDWixXQUFXLEVBQUVhLFVBQVUsRUFBRUMsV0FBVyxFQUFFO0VBQUUsSUFBSUQsVUFBVSxFQUFFWCxpQkFBaUIsQ0FBQ0YsV0FBVyxDQUFDZSxTQUFTLEVBQUVGLFVBQVUsQ0FBQztFQUFFLElBQUlDLFdBQVcsRUFBRVosaUJBQWlCLENBQUNGLFdBQVcsRUFBRWMsV0FBVyxDQUFDO0VBQUUsT0FBT2QsV0FBVztBQUFFO0FBRXROLElBQUlnQixTQUFTLEdBQUcsYUFBYSxZQUFZO0VBQ3ZDO0FBQ0Y7QUFDQTtBQUNBO0VBQ0UsU0FBU0EsU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFO0lBQ3JCLElBQUlDLFFBQVEsR0FBR0MsU0FBUyxDQUFDYixNQUFNLEdBQUcsQ0FBQyxJQUFJYSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUtDLFNBQVMsR0FBR0QsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUs7SUFFeEZyQixlQUFlLENBQUMsSUFBSSxFQUFFa0IsU0FBUyxDQUFDO0lBRWhDLElBQUksQ0FBQ0ssR0FBRyxHQUFHSixFQUFFO0lBQ2IsSUFBSSxDQUFDSyxTQUFTLEdBQUdKLFFBQVE7RUFDM0I7RUFDQTtBQUNGO0FBQ0E7O0VBR0VOLFlBQVksQ0FBQ0ksU0FBUyxFQUFFLENBQUM7SUFDdkJMLEdBQUcsRUFBRSxJQUFJO0lBQ1RZLEdBQUcsRUFBRSxTQUFTQSxHQUFHQSxDQUFBLEVBQUc7TUFDbEIsT0FBTyxJQUFJLENBQUNGLEdBQUc7SUFDakI7SUFDQTtBQUNKO0FBQ0E7RUFFRSxDQUFDLEVBQUU7SUFDRFYsR0FBRyxFQUFFLFVBQVU7SUFDZlksR0FBRyxFQUFFLFNBQVNBLEdBQUdBLENBQUEsRUFBRztNQUNsQixPQUFPLElBQUksQ0FBQ0QsU0FBUztJQUN2QjtFQUNGLENBQUMsQ0FBQyxDQUFDO0VBRUgsT0FBT04sU0FBUztBQUNsQixDQUFDLEVBQUU7QUFFSCxJQUFJUSxRQUFRLEdBQUdSLFNBQVM7QUFDeEJwQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUc0QixRQUFRIn0=