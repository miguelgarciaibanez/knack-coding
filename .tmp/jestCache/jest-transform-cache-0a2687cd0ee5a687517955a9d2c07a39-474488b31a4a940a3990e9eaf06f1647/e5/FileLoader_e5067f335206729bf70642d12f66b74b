834fe75c9993e40a3bbdddf7a1d1a77b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _path = _interopRequireDefault(require("path"));
var _Reference = _interopRequireDefault(require("./../Reference"));
var _PackageReference = _interopRequireDefault(require("./../PackageReference"));
var _TagReference = _interopRequireDefault(require("./../TagReference"));
var _Definition = _interopRequireDefault(require("./../Definition"));
var _validateNpmPackageName = _interopRequireDefault(require("validate-npm-package-name"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var FileLoader = /*#__PURE__*/function () {
  /**
   * @param {ContainerBuilder} container
   */
  function FileLoader(container) {
    _classCallCheck(this, FileLoader);
    this._container = container;
  }
  /**
   * @returns {ContainerBuilder}
   */

  _createClass(FileLoader, [{
    key: "container",
    get: function get() {
      return this._container;
    }
    /**
     * @returns {string}
     */
  }, {
    key: "filePath",
    get: function get() {
      return this._filePath;
    }
    /**
     * @param {string} value
     */,

    set: function set(value) {
      this._filePath = value;
    }
    /**
     * @param {*} attributes
     * @returns Map
     * @private
     */
  }, {
    key: "_checkFile",
    value:
    /**
     * @param {string} file
     * @protected
     */
    function _checkFile(file) {
      this.filePath = file;
    }
    /**
     * @param {Array<*>} services
     *
     * @protected
     */
  }, {
    key: "_parseDefinitions",
    value: function _parseDefinitions() {
      var services = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      for (var id in services) {
        this._parseDefinition(services, id);
      }
    }
    /**
     * @param {*} services
     * @param {string} id
     * @private
     */
  }, {
    key: "_parseDefinition",
    value: function _parseDefinition(services, id) {
      var service = services[id];
      if (typeof service === 'string') {
        this.container.setAlias(id, service.slice(1));
      } else if (service.factory) {
        this.container.setDefinition(id, this._getFactoryDefinition(service));
      } else {
        this.container.setDefinition(id, this._getDefinition(service));
      }
    }
    /**
     * @param {*} service
     * @returns {Definition}
     * @private
     */
  }, {
    key: "_getFactoryDefinition",
    value: function _getFactoryDefinition(service) {
      var object = null;
      if (service.factory["class"].includes('@', 0)) {
        object = new _Reference["default"](service.factory["class"].slice(1));
      } else {
        object = this._requireClassNameFromPath(service.factory["class"]);
      }
      var definition = new _Definition["default"]();
      definition.shared = service.shared;
      definition.setFactory(object, service.factory.method);
      definition.args = this._getParsedArguments(service.arguments);
      return definition;
    }
    /**
     * @param {*} service
     * @returns {Definition}
     * @private
     */
  }, {
    key: "_getDefinition",
    value: function _getDefinition(service) {
      var definition;
      if (!service.synthetic) {
        var object = this._requireClassNameFromPath(service["class"], service.main);
        definition = new _Definition["default"](object);
        definition.lazy = service.lazy || false;
        definition["public"] = service["public"] !== false;
        definition["abstract"] = service["abstract"] || false;
        definition.parent = service.parent;
        definition.decoratedService = service.decorates;
        definition.decorationPriority = service.decoration_priority;
        definition.deprecated = service.deprecated;
        definition.shared = service.shared;
        this._parseArguments(definition, service.arguments);
        this._parseProperties(definition, service.properties);
        this._parseCalls(definition, service.calls);
        this._parseTags(definition, service.tags);
      } else {
        definition = new _Definition["default"]();
        definition.synthetic = true;
      }
      return definition;
    }
    /**
     * @param {Definition} definition
     * @param {Array} calls
     * @private
     */
  }, {
    key: "_parseCalls",
    value: function _parseCalls(definition) {
      var _this = this;
      var calls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      calls.forEach(function (call) {
        definition.addMethodCall(call.method, _this._getParsedArguments(call.arguments));
      });
    }
    /**
     * @param {Definition} definition
     * @param {Array} tags
     * @private
     */
  }, {
    key: "_parseTags",
    value: function _parseTags(definition) {
      var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      tags.forEach(function (tag) {
        definition.addTag(tag.name, FileLoader._parseTagAttributes(tag.attributes));
      });
    }
    /**
     * @param {Array} args
     * @returns {Array}
     * @private
     */
  }, {
    key: "_getParsedArguments",
    value: function _getParsedArguments() {
      var _this2 = this;
      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var parsedArguments = [];
      args.forEach(function (argument) {
        parsedArguments.push(_this2._parseArgument(argument));
      });
      return parsedArguments;
    }
    /**
     * @param {Definition} definition
     * @param {Object} properties
     * @private
     */
  }, {
    key: "_parseProperties",
    value: function _parseProperties(definition) {
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      for (var propertyKey in properties) {
        definition.addProperty(propertyKey, this._parseArgument(properties[propertyKey]));
      }
    }
    /**
     * @param {Array<{resource}>} imports
     *
     * @protected
     */
  }, {
    key: "_parseImports",
    value: function _parseImports() {
      var imports = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var _iterator = _createForOfIteratorHelper(imports),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var file = _step.value;
          var workingPath = this.filePath;
          this.load(_path["default"].join(_path["default"].dirname(this.filePath), file.resource));
          this.filePath = workingPath;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    /**
     * @param {*} parameters
     *
     * @protected
     */
  }, {
    key: "_parseParameters",
    value: function _parseParameters() {
      var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      for (var key in parameters) {
        this._container.setParameter(key, parameters[key]);
      }
    }
    /**
     * @param {Definition} definition
     * @param {Array} args
     *
     * @private
     */
  }, {
    key: "_parseArguments",
    value: function _parseArguments(definition) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var argument = definition["abstract"] ? 'appendArgs' : 'args';
      definition[argument] = this._getParsedArguments(args);
    }
    /**
     * @param {string} argument
     * @returns {*}
     *
     * @private
     */
  }, {
    key: "_parseArgument",
    value: function _parseArgument(argument) {
      if (typeof argument === 'boolean') {
        return argument;
      }
      if (argument.slice(0, 2) === '@?') {
        return new _Reference["default"](argument.slice(2), true);
      } else if (argument.slice(0, 1) === '@') {
        return new _Reference["default"](argument.slice(1));
      } else if (argument.slice(0, 1) === '%' && argument.slice(-1) === '%') {
        return this._getArgumentParameter(argument);
      } else if (argument.slice(0, 1) === '%') {
        return new _PackageReference["default"](argument.slice(1));
      } else if (argument.slice(0, 7) === '!tagged') {
        return new _TagReference["default"](argument.slice(8));
      }
      return argument;
    }
    /**
     * @param {string} argument
     * @returns {*}
     *
     * @private
     */
  }, {
    key: "_getArgumentParameter",
    value: function _getArgumentParameter(argument) {
      if (argument.slice(1, 4) === 'env') {
        return process.env[argument.slice(5, -2)];
      } else {
        return this._container.getParameter(argument.slice(1, -1));
      }
    }
    /**
     * @param {string} classObject
     * @param {string} mainClassName
     * @returns {*}
     *
     * @private
     */
  }, {
    key: "_requireClassNameFromPath",
    value: function _requireClassNameFromPath(classObject, mainClassName) {
      var fromDirectory = !_path["default"].isAbsolute(classObject) ? _path["default"].dirname(this.filePath) : '/';
      fromDirectory = this.container.defaultDir || fromDirectory;
      var exportedModule = null;
      try {
        exportedModule = require(_path["default"].join(fromDirectory, classObject));
      } catch (error) {
        // If the path is a valid npm package name,
        // try to import a global package.
        if (error.code === 'MODULE_NOT_FOUND' && (0, _validateNpmPackageName["default"])(classObject)) {
          exportedModule = require(classObject);
        } else {
          throw error;
        }
      }
      var mainClass = exportedModule[mainClassName];
      var defaultClass = exportedModule["default"];
      var fileNameClass = exportedModule[_path["default"].basename(classObject)];
      return mainClass || defaultClass || fileNameClass || exportedModule;
    }
  }], [{
    key: "_parseTagAttributes",
    value: function _parseTagAttributes(attributes) {
      var map = new Map();
      if (attributes) {
        for (var _i = 0, _Object$keys = Object.keys(attributes); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          map.set(key, attributes[key]);
        }
      }
      return map;
    }
  }]);
  return FileLoader;
}();
var _default = FileLoader;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,