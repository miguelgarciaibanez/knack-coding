5b2a8896994ae8ecf132f65ef5e9b7cd
'use strict';

var Type = require('../type');
var YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +
// [1] year
'-([0-9][0-9])' +
// [2] month
'-([0-9][0-9])$'); // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +
// [1] year
'-([0-9][0-9]?)' +
// [2] month
'-([0-9][0-9]?)' +
// [3] day
'(?:[Tt]|[ \\t]+)' +
// ...
'([0-9][0-9]?)' +
// [4] hour
':([0-9][0-9])' +
// [5] minute
':([0-9][0-9])' +
// [6] second
'(?:\\.([0-9]*))?' +
// [7] fraction
'(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' +
// [8] tz [9] tz_sign [10] tz_hour
'(?::([0-9][0-9]))?))?$'); // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}
function constructYamlTimestamp(data) {
  var match,
    year,
    month,
    day,
    hour,
    minute,
    second,
    fraction = 0,
    delta = null,
    tz_hour,
    tz_minute,
    date;
  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +match[1];
  month = +match[2] - 1; // JS month starts with 0
  day = +match[3];
  if (!match[4]) {
    // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +match[4];
  minute = +match[5];
  second = +match[6];
  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) {
      // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +match[10];
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }
  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
  if (delta) date.setTime(date.getTime() - delta);
  return date;
}
function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}
module.exports = new Type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIllBTUxfREFURV9SRUdFWFAiLCJSZWdFeHAiLCJZQU1MX1RJTUVTVEFNUF9SRUdFWFAiLCJyZXNvbHZlWWFtbFRpbWVzdGFtcCIsImRhdGEiLCJleGVjIiwiY29uc3RydWN0WWFtbFRpbWVzdGFtcCIsIm1hdGNoIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsImZyYWN0aW9uIiwiZGVsdGEiLCJ0el9ob3VyIiwidHpfbWludXRlIiwiZGF0ZSIsIkVycm9yIiwiRGF0ZSIsIlVUQyIsInNsaWNlIiwibGVuZ3RoIiwic2V0VGltZSIsImdldFRpbWUiLCJyZXByZXNlbnRZYW1sVGltZXN0YW1wIiwib2JqZWN0IiwidG9JU09TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJpbnN0YW5jZU9mIiwicmVwcmVzZW50Il0sInNvdXJjZXMiOlsidGltZXN0YW1wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBZQU1MX0RBVEVfUkVHRVhQID0gbmV3IFJlZ0V4cChcbiAgJ14oWzAtOV1bMC05XVswLTldWzAtOV0pJyAgICAgICAgICArIC8vIFsxXSB5ZWFyXG4gICctKFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbMl0gbW9udGhcbiAgJy0oWzAtOV1bMC05XSkkJyk7ICAgICAgICAgICAgICAgICAgIC8vIFszXSBkYXlcblxudmFyIFlBTUxfVElNRVNUQU1QX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgKyAvLyBbM10gZGF5XG4gICcoPzpbVHRdfFsgXFxcXHRdKyknICAgICAgICAgICAgICAgICArIC8vIC4uLlxuICAnKFswLTldWzAtOV0/KScgICAgICAgICAgICAgICAgICAgICsgLy8gWzRdIGhvdXJcbiAgJzooWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFs1XSBtaW51dGVcbiAgJzooWzAtOV1bMC05XSknICAgICAgICAgICAgICAgICAgICArIC8vIFs2XSBzZWNvbmRcbiAgJyg/OlxcXFwuKFswLTldKikpPycgICAgICAgICAgICAgICAgICsgLy8gWzddIGZyYWN0aW9uXG4gICcoPzpbIFxcXFx0XSooWnwoWy0rXSkoWzAtOV1bMC05XT8pJyArIC8vIFs4XSB0eiBbOV0gdHpfc2lnbiBbMTBdIHR6X2hvdXJcbiAgJyg/OjooWzAtOV1bMC05XSkpPykpPyQnKTsgICAgICAgICAgIC8vIFsxMV0gdHpfbWludXRlXG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sVGltZXN0YW1wKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIGlmIChZQU1MX1RJTUVTVEFNUF9SRUdFWFAuZXhlYyhkYXRhKSAhPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIHZhciBtYXRjaCwgeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIGZyYWN0aW9uID0gMCxcbiAgICAgIGRlbHRhID0gbnVsbCwgdHpfaG91ciwgdHpfbWludXRlLCBkYXRlO1xuXG4gIG1hdGNoID0gWUFNTF9EQVRFX1JFR0VYUC5leGVjKGRhdGEpO1xuICBpZiAobWF0Y2ggPT09IG51bGwpIG1hdGNoID0gWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSk7XG5cbiAgaWYgKG1hdGNoID09PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoJ0RhdGUgcmVzb2x2ZSBlcnJvcicpO1xuXG4gIC8vIG1hdGNoOiBbMV0geWVhciBbMl0gbW9udGggWzNdIGRheVxuXG4gIHllYXIgPSArKG1hdGNoWzFdKTtcbiAgbW9udGggPSArKG1hdGNoWzJdKSAtIDE7IC8vIEpTIG1vbnRoIHN0YXJ0cyB3aXRoIDBcbiAgZGF5ID0gKyhtYXRjaFszXSk7XG5cbiAgaWYgKCFtYXRjaFs0XSkgeyAvLyBubyBob3VyXG4gICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXkpKTtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbNF0gaG91ciBbNV0gbWludXRlIFs2XSBzZWNvbmQgWzddIGZyYWN0aW9uXG5cbiAgaG91ciA9ICsobWF0Y2hbNF0pO1xuICBtaW51dGUgPSArKG1hdGNoWzVdKTtcbiAgc2Vjb25kID0gKyhtYXRjaFs2XSk7XG5cbiAgaWYgKG1hdGNoWzddKSB7XG4gICAgZnJhY3Rpb24gPSBtYXRjaFs3XS5zbGljZSgwLCAzKTtcbiAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgMykgeyAvLyBtaWxsaS1zZWNvbmRzXG4gICAgICBmcmFjdGlvbiArPSAnMCc7XG4gICAgfVxuICAgIGZyYWN0aW9uID0gK2ZyYWN0aW9uO1xuICB9XG5cbiAgLy8gbWF0Y2g6IFs4XSB0eiBbOV0gdHpfc2lnbiBbMTBdIHR6X2hvdXIgWzExXSB0el9taW51dGVcblxuICBpZiAobWF0Y2hbOV0pIHtcbiAgICB0el9ob3VyID0gKyhtYXRjaFsxMF0pO1xuICAgIHR6X21pbnV0ZSA9ICsobWF0Y2hbMTFdIHx8IDApO1xuICAgIGRlbHRhID0gKHR6X2hvdXIgKiA2MCArIHR6X21pbnV0ZSkgKiA2MDAwMDsgLy8gZGVsdGEgaW4gbWlsaS1zZWNvbmRzXG4gICAgaWYgKG1hdGNoWzldID09PSAnLScpIGRlbHRhID0gLWRlbHRhO1xuICB9XG5cbiAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbikpO1xuXG4gIGlmIChkZWx0YSkgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gZGVsdGEpO1xuXG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sVGltZXN0YW1wKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICByZXR1cm4gb2JqZWN0LnRvSVNPU3RyaW5nKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnRpbWVzdGFtcCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sVGltZXN0YW1wLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAsXG4gIGluc3RhbmNlT2Y6IERhdGUsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbFRpbWVzdGFtcFxufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVosSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBRTdCLElBQUlDLGdCQUFnQixHQUFHLElBQUlDLE1BQU0sQ0FDL0IseUJBQXlCO0FBQVk7QUFDckMsZUFBZTtBQUFzQjtBQUNyQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQW1COztBQUV2QyxJQUFJQyxxQkFBcUIsR0FBRyxJQUFJRCxNQUFNLENBQ3BDLHlCQUF5QjtBQUFZO0FBQ3JDLGdCQUFnQjtBQUFxQjtBQUNyQyxnQkFBZ0I7QUFBcUI7QUFDckMsa0JBQWtCO0FBQW1CO0FBQ3JDLGVBQWU7QUFBc0I7QUFDckMsZUFBZTtBQUFzQjtBQUNyQyxlQUFlO0FBQXNCO0FBQ3JDLGtCQUFrQjtBQUFtQjtBQUNyQyxrQ0FBa0M7QUFBRztBQUNyQyx3QkFBd0IsQ0FBQyxDQUFDLENBQVc7O0FBRXZDLFNBQVNFLG9CQUFvQkEsQ0FBQ0MsSUFBSSxFQUFFO0VBQ2xDLElBQUlBLElBQUksS0FBSyxJ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