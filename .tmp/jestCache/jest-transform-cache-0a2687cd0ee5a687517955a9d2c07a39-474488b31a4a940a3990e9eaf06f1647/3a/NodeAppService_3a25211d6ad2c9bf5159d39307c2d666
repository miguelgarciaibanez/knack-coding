c5b7d9a7bbf9d7c13230d9fc1d70119d
"use strict";

/* istanbul ignore next */
function cov_ez513qbef() {
  var path = "/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/NodeAppService.ts";
  var hash = "2198fa6f8216f0f171232f38a4b41edb1741897e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/miguelgarcia/Developer/Knack/Challenge/src/contexts/shared/infrastructure/services/NodeApp/NodeAppService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 11
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 6,
          column: 8
        },
        end: {
          line: 14,
          column: 9
        }
      },
      "3": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 7,
          column: 72
        }
      },
      "4": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 51
        }
      },
      "5": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "6": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 31
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 13,
          column: 61
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 23,
          column: 9
        }
      },
      "9": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 122
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 24
        }
      },
      "11": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 50
        }
      },
      "12": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 42,
          column: 9
        }
      },
      "13": {
        start: {
          line: 27,
          column: 30
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "14": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 64
        }
      },
      "15": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "16": {
        start: {
          line: 30,
          column: 33
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "17": {
        start: {
          line: 31,
          column: 35
        },
        end: {
          line: 31,
          column: 109
        }
      },
      "18": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 99
        }
      },
      "19": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 50
        }
      },
      "20": {
        start: {
          line: 34,
          column: 16
        },
        end: {
          line: 34,
          column: 48
        }
      },
      "21": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "22": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 46
        }
      },
      "23": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 30
        }
      },
      "24": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 72
        }
      },
      "25": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "26": {
        start: {
          line: 46,
          column: 32
        },
        end: {
          line: 49,
          column: 14
        }
      },
      "27": {
        start: {
          line: 46,
          column: 72
        },
        end: {
          line: 46,
          column: 84
        }
      },
      "28": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 66
        }
      },
      "29": {
        start: {
          line: 48,
          column: 45
        },
        end: {
          line: 48,
          column: 64
        }
      },
      "30": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 53,
          column: 15
        }
      },
      "31": {
        start: {
          line: 51,
          column: 34
        },
        end: {
          line: 51,
          column: 95
        }
      },
      "32": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 52
        }
      },
      "33": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 33
        }
      },
      "34": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 71
        }
      },
      "35": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 64,
          column: 10
        }
      },
      "36": {
        start: {
          line: 61,
          column: 66
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "37": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 61
        }
      },
      "38": {
        start: {
          line: 63,
          column: 40
        },
        end: {
          line: 63,
          column: 59
        }
      },
      "39": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 28
        }
      },
      "40": {
        start: {
          line: 68,
          column: 0
        },
        end: {
          line: 68,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 5,
            column: 5
          }
        },
        loc: {
          start: {
            line: 5,
            column: 35
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 32
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 25
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 29,
            column: 33
          },
          end: {
            line: 29,
            column: 34
          }
        },
        loc: {
          start: {
            line: 29,
            column: 46
          },
          end: {
            line: 36,
            column: 13
          }
        },
        line: 29
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 78
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 46,
            column: 67
          },
          end: {
            line: 46,
            column: 68
          }
        },
        loc: {
          start: {
            line: 46,
            column: 72
          },
          end: {
            line: 46,
            column: 84
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 47,
            column: 22
          }
        },
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 49,
            column: 13
          }
        },
        line: 47
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 48,
            column: 40
          },
          end: {
            line: 48,
            column: 41
          }
        },
        loc: {
          start: {
            line: 48,
            column: 45
          },
          end: {
            line: 48,
            column: 64
          }
        },
        line: 48
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 50,
            column: 30
          },
          end: {
            line: 50,
            column: 31
          }
        },
        loc: {
          start: {
            line: 50,
            column: 40
          },
          end: {
            line: 53,
            column: 13
          }
        },
        line: 50
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 48
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 60
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 61,
            column: 61
          },
          end: {
            line: 61,
            column: 62
          }
        },
        loc: {
          start: {
            line: 61,
            column: 66
          },
          end: {
            line: 61,
            column: 78
          }
        },
        line: 61
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 62,
            column: 17
          },
          end: {
            line: 62,
            column: 18
          }
        },
        loc: {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 62
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 63,
            column: 35
          },
          end: {
            line: 63,
            column: 36
          }
        },
        loc: {
          start: {
            line: 63,
            column: 40
          },
          end: {
            line: 63,
            column: 59
          }
        },
        line: 63
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2198fa6f8216f0f171232f38a4b41edb1741897e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ez513qbef = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ez513qbef();
cov_ez513qbef().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const fs =
/* istanbul ignore next */
(cov_ez513qbef().s[1]++, require('fs/promises'));
class NodeAppService {
  async readNodeAppFile(appFile) {
    /* istanbul ignore next */
    cov_ez513qbef().f[0]++;
    cov_ez513qbef().s[2]++;
    try {
      const fileUri =
      /* istanbul ignore next */
      (cov_ez513qbef().s[3]++, `${__dirname}/../../../resources/${appFile}`);
      const json =
      /* istanbul ignore next */
      (cov_ez513qbef().s[4]++, await fs.readFile(fileUri));
      const nodeAppOrig =
      /* istanbul ignore next */
      (cov_ez513qbef().s[5]++, JSON.parse(json));
      /* istanbul ignore next */
      cov_ez513qbef().s[6]++;
      return nodeAppOrig;
    } catch (error) {
      /* istanbul ignore next */
      cov_ez513qbef().s[7]++;
      throw new Error(`ERROR reading file:${appFile}`);
    }
  }
  async writeNodeAppFile(nodeApp) {
    /* istanbul ignore next */
    cov_ez513qbef().f[1]++;
    cov_ez513qbef().s[8]++;
    try {
      /* istanbul ignore next */
      cov_ez513qbef().s[9]++;
      await fs.writeFile(`${__dirname}/../../../resources/application-clean.json`, JSON.stringify(nodeApp), 'utf8');
      /* istanbul ignore next */
      cov_ez513qbef().s[10]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_ez513qbef().s[11]++;
      throw new Error(`ERROR writing file`);
    }
  }
  async cleanNodeApp(nodeApp) {
    /* istanbul ignore next */
    cov_ez513qbef().f[2]++;
    cov_ez513qbef().s[12]++;
    try {
      let newversions =
      /* istanbul ignore next */
      (cov_ez513qbef().s[13]++, []);
      let nodeAppNew =
      /* istanbul ignore next */
      (cov_ez513qbef().s[14]++, JSON.parse(JSON.stringify(nodeApp)));
      /* istanbul ignore next */
      cov_ez513qbef().s[15]++;
      nodeApp.versions.map(version => {
        /* istanbul ignore next */
        cov_ez513qbef().f[3]++;
        let newVersion =
        /* istanbul ignore next */
        (cov_ez513qbef().s[16]++, JSON.parse(JSON.stringify(version)));
        let cleanObjects =
        /* istanbul ignore next */
        (cov_ez513qbef().s[17]++, this.cleanDuplicateObjects(version.objects, "fields", "identifier", "key"));
        let cleanScenes =
        /* istanbul ignore next */
        (cov_ez513qbef().s[18]++, this.cleanDuplicateObjects(version.scenes, "views", "key", "key"));
        /* istanbul ignore next */
        cov_ez513qbef().s[19]++;
        newVersion.objects = cleanObjects;
        /* istanbul ignore next */
        cov_ez513qbef().s[20]++;
        newVersion.scenes = cleanScenes;
        /* istanbul ignore next */
        cov_ez513qbef().s[21]++;
        newversions.push(newVersion);
      });
      /* istanbul ignore next */
      cov_ez513qbef().s[22]++;
      nodeAppNew.versions = newversions;
      /* istanbul ignore next */
      cov_ez513qbef().s[23]++;
      return nodeAppNew;
    } catch (error) {
      /* istanbul ignore next */
      cov_ez513qbef().s[24]++;
      throw new Error(`ERROR cleaning nodeApp:${error.message}.`);
    }
  }
  cleanDuplicateObjects(objectArray, nestedAttribute, objectKey, nestedKey) {
    /* istanbul ignore next */
    cov_ez513qbef().f[4]++;
    cov_ez513qbef().s[25]++;
    try {
      let uniqueObjects =
      /* istanbul ignore next */
      (cov_ez513qbef().s[26]++, Array.from(new Set(objectArray.map(a => {
        /* istanbul ignore next */
        cov_ez513qbef().f[5]++;
        cov_ez513qbef().s[27]++;
        return a[objectKey];
      }))).map(id => {
        /* istanbul ignore next */
        cov_ez513qbef().f[6]++;
        cov_ez513qbef().s[28]++;
        return objectArray.find(a => {
          /* istanbul ignore next */
          cov_ez513qbef().f[7]++;
          cov_ez513qbef().s[29]++;
          return a[objectKey] === id;
        });
      }));
      /* istanbul ignore next */
      cov_ez513qbef().s[30]++;
      uniqueObjects.map(object => {
        /* istanbul ignore next */
        cov_ez513qbef().f[8]++;
        const newFields =
        /* istanbul ignore next */
        (cov_ez513qbef().s[31]++, this.cleanDuplicageFields(object[nestedAttribute], nestedKey));
        /* istanbul ignore next */
        cov_ez513qbef().s[32]++;
        object[nestedAttribute] = newFields;
      });
      /* istanbul ignore next */
      cov_ez513qbef().s[33]++;
      return uniqueObjects;
    } catch (error) {
      /* istanbul ignore next */
      cov_ez513qbef().s[34]++;
      throw new Error(`ERROR cleanDuplicates:${error.message}.`);
    }
  }
  cleanDuplicageFields(fieldArray, objectKey) {
    /* istanbul ignore next */
    cov_ez513qbef().f[9]++;
    let uniqueFields =
    /* istanbul ignore next */
    (cov_ez513qbef().s[35]++, Array.from(new Set(fieldArray.map(a => {
      /* istanbul ignore next */
      cov_ez513qbef().f[10]++;
      cov_ez513qbef().s[36]++;
      return a[objectKey];
    }))).map(id => {
      /* istanbul ignore next */
      cov_ez513qbef().f[11]++;
      cov_ez513qbef().s[37]++;
      return fieldArray.find(a => {
        /* istanbul ignore next */
        cov_ez513qbef().f[12]++;
        cov_ez513qbef().s[38]++;
        return a[objectKey] === id;
      });
    }));
    /* istanbul ignore next */
    cov_ez513qbef().s[39]++;
    return uniqueFields;
  }
}
/* istanbul ignore next */
cov_ez513qbef().s[40]++;
exports.default = NodeAppService;