073b0e7074a7f056ee503a25c9fffe9e
'use strict';

var loader = require('./lib/loader');
var dumper = require('./lib/dumper');
function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' + 'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}
module.exports.Type = require('./lib/type');
module.exports.Schema = require('./lib/schema');
module.exports.FAILSAFE_SCHEMA = require('./lib/schema/failsafe');
module.exports.JSON_SCHEMA = require('./lib/schema/json');
module.exports.CORE_SCHEMA = require('./lib/schema/core');
module.exports.DEFAULT_SCHEMA = require('./lib/schema/default');
module.exports.load = loader.load;
module.exports.loadAll = loader.loadAll;
module.exports.dump = dumper.dump;
module.exports.YAMLException = require('./lib/exception');

// Re-export all types in case user wants to create custom schema
module.exports.types = {
  binary: require('./lib/type/binary'),
  float: require('./lib/type/float'),
  map: require('./lib/type/map'),
  null: require('./lib/type/null'),
  pairs: require('./lib/type/pairs'),
  set: require('./lib/type/set'),
  timestamp: require('./lib/type/timestamp'),
  bool: require('./lib/type/bool'),
  int: require('./lib/type/int'),
  merge: require('./lib/type/merge'),
  omap: require('./lib/type/omap'),
  seq: require('./lib/type/seq'),
  str: require('./lib/type/str')
};

// Removed functions from JS-YAML 3.0.x
module.exports.safeLoad = renamed('safeLoad', 'load');
module.exports.safeLoadAll = renamed('safeLoadAll', 'loadAll');
module.exports.safeDump = renamed('safeDump', 'dump');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2FkZXIiLCJyZXF1aXJlIiwiZHVtcGVyIiwicmVuYW1lZCIsImZyb20iLCJ0byIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIlR5cGUiLCJTY2hlbWEiLCJGQUlMU0FGRV9TQ0hFTUEiLCJKU09OX1NDSEVNQSIsIkNPUkVfU0NIRU1BIiwiREVGQVVMVF9TQ0hFTUEiLCJsb2FkIiwibG9hZEFsbCIsImR1bXAiLCJZQU1MRXhjZXB0aW9uIiwidHlwZXMiLCJiaW5hcnkiLCJmbG9hdCIsIm1hcCIsIm51bGwiLCJwYWlycyIsInNldCIsInRpbWVzdGFtcCIsImJvb2wiLCJpbnQiLCJtZXJnZSIsIm9tYXAiLCJzZXEiLCJzdHIiLCJzYWZlTG9hZCIsInNhZmVMb2FkQWxsIiwic2FmZUR1bXAiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGxvYWRlciA9IHJlcXVpcmUoJy4vbGliL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vbGliL2R1bXBlcicpO1xuXG5cbmZ1bmN0aW9uIHJlbmFtZWQoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIHlhbWwuJyArIGZyb20gKyAnIGlzIHJlbW92ZWQgaW4ganMteWFtbCA0LiAnICtcbiAgICAgICdVc2UgeWFtbC4nICsgdG8gKyAnIGluc3RlYWQsIHdoaWNoIGlzIG5vdyBzYWZlIGJ5IGRlZmF1bHQuJyk7XG4gIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMuVHlwZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEnKTtcbm1vZHVsZS5leHBvcnRzLkZBSUxTQUZFX1NDSEVNQSAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvZmFpbHNhZmUnKTtcbm1vZHVsZS5leHBvcnRzLkpTT05fU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2xpYi9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vbGliL3NjaGVtYS9jb3JlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSAgICAgID0gcmVxdWlyZSgnLi9saWIvc2NoZW1hL2RlZmF1bHQnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLmR1bXAgICAgICAgICAgICAgICAgPSBkdW1wZXIuZHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2xpYi9leGNlcHRpb24nKTtcblxuLy8gUmUtZXhwb3J0IGFsbCB0eXBlcyBpbiBjYXNlIHVzZXIgd2FudHMgdG8gY3JlYXRlIGN1c3RvbSBzY2hlbWFcbm1vZHVsZS5leHBvcnRzLnR5cGVzID0ge1xuICBiaW5hcnk6ICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvYmluYXJ5JyksXG4gIGZsb2F0OiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9mbG9hdCcpLFxuICBtYXA6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvbWFwJyksXG4gIG51bGw6ICAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9udWxsJyksXG4gIHBhaXJzOiAgICAgcmVxdWlyZSgnLi9saWIvdHlwZS9wYWlycycpLFxuICBzZXQ6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc2V0JyksXG4gIHRpbWVzdGFtcDogcmVxdWlyZSgnLi9saWIvdHlwZS90aW1lc3RhbXAnKSxcbiAgYm9vbDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2Jvb2wnKSxcbiAgaW50OiAgICAgICByZXF1aXJlKCcuL2xpYi90eXBlL2ludCcpLFxuICBtZXJnZTogICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvbWVyZ2UnKSxcbiAgb21hcDogICAgICByZXF1aXJlKCcuL2xpYi90eXBlL29tYXAnKSxcbiAgc2VxOiAgICAgICByZXF1aXJlKCcuL2xpYi90eXBlL3NlcScpLFxuICBzdHI6ICAgICAgIHJlcXVpcmUoJy4vbGliL3R5cGUvc3RyJylcbn07XG5cbi8vIFJlbW92ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAzLjAueFxubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWQgICAgICAgICAgICA9IHJlbmFtZWQoJ3NhZmVMb2FkJywgJ2xvYWQnKTtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkQWxsICAgICAgICAgPSByZW5hbWVkKCdzYWZlTG9hZEFsbCcsICdsb2FkQWxsJyk7XG5tb2R1bGUuZXhwb3J0cy5zYWZlRHVtcCAgICAgICAgICAgID0gcmVuYW1lZCgnc2FmZUR1bXAnLCAnZHVtcCcpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUdaLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNwQyxJQUFJQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFHcEMsU0FBU0UsT0FBT0EsQ0FBQ0MsSUFBSSxFQUFFQyxFQUFFLEVBQUU7RUFDekIsT0FBTyxZQUFZO0lBQ2pCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLGdCQUFnQixHQUFHRixJQUFJLEdBQUcsNEJBQTRCLEdBQ3BFLFdBQVcsR0FBR0MsRUFBRSxHQUFHLHlDQUF5QyxDQUFDO0VBQ2pFLENBQUM7QUFDSDtBQUdBRSxNQUFNLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxHQUFrQlIsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUMxRE0sTUFBTSxDQUFDQyxPQUFPLENBQUNFLE1BQU0sR0FBZ0JULE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDNURNLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDRyxlQUFlLEdBQU9WLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUNyRU0sTUFBTSxDQUFDQyxPQUFPLENBQUNJLFdBQVcsR0FBV1gsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ2pFTSxNQUFNLENBQUNDLE9BQU8sQ0FBQ0ssV0FBVyxHQUFXWixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDakVNLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDTSxjQUFjLEdBQVFiLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztBQUNwRU0sTUFBTSxDQUFDQyxPQUFPLENBQUNPLElBQUksR0FBa0JmLE1BQU0sQ0FBQ2UsSUFBSTtBQUNoRFIsTUFBTSxDQUFDQyxPQUFPLENBQUNRLE9BQU8sR0FBZWhCLE1BQU0sQ0FBQ2dCLE9BQU87QUFDbkRULE1BQU0sQ0FBQ0MsT0FBTyxDQUFDUyxJQUFJLEdBQWtCZixNQUFNLENBQUNlLElBQUk7QUFDaERWLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDVSxhQUFhLEdBQVNqQixPQUFPLENBQUMsaUJBQWlCLENBQUM7O0FBRS9EO0FBQ0FNLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDVyxLQUFLLEdBQUc7RUFDckJDLE1BQU0sRUFBS25CLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQztFQUN2Q29CLEtBQUssRUFBTXBCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztFQUN0Q3FCLEdBQUcsRUFBUXJCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztFQUNwQ3NCLElBQUksRUFBT3RCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztFQUNyQ3VCLEtBQUssRUFBTXZCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztFQUN0Q3dCLEdBQUcsRUFBUXhCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztFQUNwQ3lCLFNBQVMsRUFBRXpCLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQztFQUMxQzBCLElBQUksRUFBTzFCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztFQUNyQzJCLEdBQUcsRUFBUTNCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztFQUNwQzRCLEtBQUssRUFBTTVCLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztFQUN0QzZCLElBQUksRUFBTzdCLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztFQUNyQzhCLEdBQUcsRUFBUTlCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztFQUNwQytCLEdBQUcsRUFBUS9CLE9BQU8sQ0FBQyxnQkFBZ0I7QUFDckMsQ0FBQzs7QUFFRDtBQUNBTSxNQUFNLENBQUNDLE9BQU8sQ0FBQ3lCLFFBQVEsR0FBYzlCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDO0FBQ2hFSSxNQUFNLENBQUNDLE9BQU8sQ0FBQzBCLFdBQVcsR0FBVy9CLE9BQU8sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDO0FBQ3RFSSxNQUFNLENBQUNDLE9BQU8sQ0FBQzJCLFFBQVEsR0FBY2hDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDIn0=