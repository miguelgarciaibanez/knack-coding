46d52acfa959f1e767ddf22b7bce9240
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _MethodCallEmptyException = _interopRequireDefault(require("./Exception/MethodCallEmptyException"));
var _AttributesMapException = _interopRequireDefault(require("./Exception/AttributesMapException"));
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var Definition = /*#__PURE__*/function () {
  /**
   * @param {*|null} Object
   * @param {Array} args
   */
  function Definition() {
    var Object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _classCallCheck(this, Definition);
    this._Object = Object;
    this._args = args;
    this._calls = [];
    this._tags = [];
    this._properties = new Map();
    this._lazy = false;
    this._deprecated = null;
    this._factory = null;
    this._public = true;
    this._synthetic = false;
    this._decoratedService = null;
    this._decorationPriority = null;
    this._shared = true;
    this._abstract = false;
    this._appendArgs = [];
    this._parent = null;
  }
  /**
   * @return {boolean}
   */

  _createClass(Definition, [{
    key: "abstract",
    get: function get() {
      return this._abstract;
    }
    /**
     * @param {boolean} value
     */,

    set: function set(value) {
      this._abstract = value;
    }
    /**
     * @returns {string}
     */
  }, {
    key: "decoratedService",
    get: function get() {
      return this._decoratedService;
    }
    /**
     * @param {string} value
     */,

    set: function set(value) {
      this._decoratedService = value;
    }
    /**
     * @return {number}
     */
  }, {
    key: "decorationPriority",
    get: function get() {
      return this._decorationPriority;
    }
    /**
     * @param {number} value
     */,

    set: function set(value) {
      this._decorationPriority = value;
    }
    /**
     * @returns {boolean}
     */
  }, {
    key: "public",
    get: function get() {
      return this._public;
    }
    /**
     * @param {boolean} value
     */,

    set: function set(value) {
      this._public = value;
    }
    /**
     * @returns {null|{Object: (Object|Reference), method: string}|*}
     */
  }, {
    key: "factory",
    get: function get() {
      return this._factory;
    }
    /**
     * @returns {null|string}
     */
  }, {
    key: "deprecated",
    get: function get() {
      return this._deprecated;
    }
    /**
     * @param {null|string} value
     */,

    set: function set(value) {
      this._deprecated = value;
    }
    /**
     * @returns {boolean}
     */
  }, {
    key: "lazy",
    get: function get() {
      return this._lazy;
    }
    /**
     * @param {boolean} value
     */,

    set: function set(value) {
      this._lazy = value;
    }
    /**
     * @returns {*}
     */
  }, {
    key: "Object",
    get: function get() {
      return this._Object;
    }
    /**
     * @param {*} value
     */,

    set: function set(value) {
      this._Object = value;
    }
    /**
     * @returns {Array}
     */
  }, {
    key: "args",
    get: function get() {
      return this._args;
    }
    /**
     * @param {Array} args
     */,

    set: function set(args) {
      this._args = args;
    }
    /**
     * @returns {Array}
     */
  }, {
    key: "calls",
    get: function get() {
      return this._calls;
    }
    /**
     * @returns {Array}
     */
  }, {
    key: "tags",
    get: function get() {
      return this._tags;
    }
    /**
     * @returns {Map}
     */
  }, {
    key: "properties",
    get: function get() {
      return this._properties;
    }
    /**
     * @return {Array}
     */
  }, {
    key: "appendArgs",
    get: function get() {
      return this._appendArgs;
    }
    /**
     * @param {Array} appendArgs
     */,

    set: function set(appendArgs) {
      this._appendArgs = appendArgs;
    }
    /**
     * @returns {boolean}
     */
  }, {
    key: "synthetic",
    get: function get() {
      return this._synthetic;
    }
    /**
     * @param {boolean} value
     */,

    set: function set(value) {
      this._synthetic = value;
    }
    /**
     * @returns {boolean}
     */
  }, {
    key: "shared",
    get: function get() {
      return this._shared;
    }
    /**
     * @param {boolean} value
     */,

    set: function set(value) {
      this._shared = value;
    }
    /**
     * @return {string}
     */
  }, {
    key: "parent",
    get: function get() {
      return this._parent;
    }
    /**
     * @param {string} value
     */,

    set: function set(value) {
      this._parent = value;
    }
    /**
     * @param {Object|Reference} Object
     * @param {string} method
     */
  }, {
    key: "setFactory",
    value: function setFactory(Object, method) {
      this._factory = {
        Object: Object,
        method: method
      };
    }
    /**
     * @param {*} argument
     * @returns {Definition}
     */
  }, {
    key: "addArgument",
    value: function addArgument(argument) {
      this._args.push(argument);
      return this;
    }
    /**
     * @param {string} method
     * @param {Array} args
     */
  }, {
    key: "addMethodCall",
    value: function addMethodCall(method) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if (method.length === 0) {
        throw new _MethodCallEmptyException["default"]();
      }
      this._calls.push({
        method: method,
        args: args
      });
      return this;
    }
    /**
     * @param {string} name
     * @param {Map} attributes
     * @returns {Definition}
     */
  }, {
    key: "addTag",
    value: function addTag(name) {
      var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();
      if (attributes instanceof Map) {
        this._tags.push({
          name: name,
          attributes: attributes
        });
        return this;
      }
      throw new _AttributesMapException["default"]();
    }
    /**
     * @param {string} key
     * @param {*} value
     * @returns {Definition}
     */
  }, {
    key: "addProperty",
    value: function addProperty(key, value) {
      this._properties.set(key, value);
      return this;
    }
    /**
     * @param {boolean} bypassPublic
     * @return {boolean}
     */
  }, {
    key: "isPublic",
    value: function isPublic() {
      var bypassPublic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return this["public"] || !bypassPublic && this["public"];
    }
  }]);
  return Definition;
}();
var _default = Definition;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,