1ef760649d763a7a21ae3cd391b31b55
'use strict';

var common = require('../common');
var Type = require('../type');
var YAML_FLOAT_PATTERN = new RegExp(
// 2.5e4, 2.5 and integers
'^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
// .2e4, .2
// special case, seems not from spec
'|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
// .inf
'|[-+]?\\.(?:inf|Inf|INF)' +
// .nan
'|\\.(?:nan|NaN|NAN))$');
function resolveYamlFloat(data) {
  if (data === null) return false;
  if (!YAML_FLOAT_PATTERN.test(data) ||
  // Quick hack to not allow integers end with `_`
  // Probably should update regexp & check speed
  data[data.length - 1] === '_') {
    return false;
  }
  return true;
}
function constructYamlFloat(data) {
  var value, sign;
  value = data.replace(/_/g, '').toLowerCase();
  sign = value[0] === '-' ? -1 : 1;
  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }
  if (value === '.inf') {
    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}
var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
function representYamlFloat(object, style) {
  var res;
  if (isNaN(object)) {
    switch (style) {
      case 'lowercase':
        return '.nan';
      case 'uppercase':
        return '.NAN';
      case 'camelcase':
        return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '.inf';
      case 'uppercase':
        return '.INF';
      case 'camelcase':
        return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase':
        return '-.inf';
      case 'uppercase':
        return '-.INF';
      case 'camelcase':
        return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }
  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}
function isFloat(object) {
  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));
}
module.exports = new Type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiVHlwZSIsIllBTUxfRkxPQVRfUEFUVEVSTiIsIlJlZ0V4cCIsInJlc29sdmVZYW1sRmxvYXQiLCJkYXRhIiwidGVzdCIsImxlbmd0aCIsImNvbnN0cnVjdFlhbWxGbG9hdCIsInZhbHVlIiwic2lnbiIsInJlcGxhY2UiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJzbGljZSIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJOYU4iLCJwYXJzZUZsb2F0IiwiU0NJRU5USUZJQ19XSVRIT1VUX0RPVCIsInJlcHJlc2VudFlhbWxGbG9hdCIsIm9iamVjdCIsInN0eWxlIiwicmVzIiwiaXNOYU4iLCJpc05lZ2F0aXZlWmVybyIsInRvU3RyaW5nIiwiaXNGbG9hdCIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJkZWZhdWx0U3R5bGUiXSwic291cmNlcyI6WyJmbG9hdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBZQU1MX0ZMT0FUX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFxuICAvLyAyLjVlNCwgMi41IGFuZCBpbnRlZ2Vyc1xuICAnXig/OlstK10/KD86WzAtOV1bMC05X10qKSg/OlxcXFwuWzAtOV9dKik/KD86W2VFXVstK10/WzAtOV0rKT8nICtcbiAgLy8gLjJlNCwgLjJcbiAgLy8gc3BlY2lhbCBjYXNlLCBzZWVtcyBub3QgZnJvbSBzcGVjXG4gICd8XFxcXC5bMC05X10rKD86W2VFXVstK10/WzAtOV0rKT8nICtcbiAgLy8gLmluZlxuICAnfFstK10/XFxcXC4oPzppbmZ8SW5mfElORiknICtcbiAgLy8gLm5hblxuICAnfFxcXFwuKD86bmFufE5hTnxOQU4pKSQnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxGbG9hdChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFZQU1MX0ZMT0FUX1BBVFRFUk4udGVzdChkYXRhKSB8fFxuICAgICAgLy8gUXVpY2sgaGFjayB0byBub3QgYWxsb3cgaW50ZWdlcnMgZW5kIHdpdGggYF9gXG4gICAgICAvLyBQcm9iYWJseSBzaG91bGQgdXBkYXRlIHJlZ2V4cCAmIGNoZWNrIHNwZWVkXG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPT09ICdfJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sRmxvYXQoZGF0YSkge1xuICB2YXIgdmFsdWUsIHNpZ247XG5cbiAgdmFsdWUgID0gZGF0YS5yZXBsYWNlKC9fL2csICcnKS50b0xvd2VyQ2FzZSgpO1xuICBzaWduICAgPSB2YWx1ZVswXSA9PT0gJy0nID8gLTEgOiAxO1xuXG4gIGlmICgnKy0nLmluZGV4T2YodmFsdWVbMF0pID49IDApIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnLmluZicpIHtcbiAgICByZXR1cm4gKHNpZ24gPT09IDEpID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICcubmFuJykge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgcmV0dXJuIHNpZ24gKiBwYXJzZUZsb2F0KHZhbHVlLCAxMCk7XG59XG5cblxudmFyIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QgPSAvXlstK10/WzAtOV0rZS87XG5cbmZ1bmN0aW9uIHJlcHJlc2VudFlhbWxGbG9hdChvYmplY3QsIHN0eWxlKSB7XG4gIHZhciByZXM7XG5cbiAgaWYgKGlzTmFOKG9iamVjdCkpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy5uYW4nO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICcuTkFOJztcbiAgICAgIGNhc2UgJ2NhbWVsY2FzZSc6IHJldHVybiAnLk5hTic7XG4gICAgfVxuICB9IGVsc2UgaWYgKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA9PT0gb2JqZWN0KSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcuaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5JbmYnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLS5pbmYnO1xuICAgICAgY2FzZSAndXBwZXJjYXNlJzogcmV0dXJuICctLklORic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy0uSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpIHtcbiAgICByZXR1cm4gJy0wLjAnO1xuICB9XG5cbiAgcmVzID0gb2JqZWN0LnRvU3RyaW5nKDEwKTtcblxuICAvLyBKUyBzdHJpbmdpZmllciBjYW4gYnVpbGQgc2NpZW50aWZpYyBmb3JtYXQgd2l0aG91dCBkb3RzOiA1ZS0xMDAsXG4gIC8vIHdoaWxlIFlBTUwgcmVxdXJlcyBkb3Q6IDUuZS0xMDAuIEZpeCBpdCB3aXRoIHNpbXBsZSBoYWNrXG5cbiAgcmV0dXJuIFNDSUVOVElGSUNfV0lUSE9VVF9ET1QudGVzdChyZXMpID8gcmVzLnJlcGxhY2UoJ2UnLCAnLmUnKSA6IHJlcztcbn1cblxuZnVuY3Rpb24gaXNGbG9hdChvYmplY3QpIHtcbiAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpICYmXG4gICAgICAgICAob2JqZWN0ICUgMSAhPT0gMCB8fCBjb21tb24uaXNOZWdhdGl2ZVplcm8ob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxGbG9hdCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sRmxvYXQsXG4gIHByZWRpY2F0ZTogaXNGbG9hdCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sRmxvYXQsXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUNqQyxJQUFJQyxJQUFJLEdBQUtELE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFFL0IsSUFBSUUsa0JBQWtCLEdBQUcsSUFBSUMsTUFBTTtBQUNqQztBQUNBLDhEQUE4RDtBQUM5RDtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsdUJBQXVCLENBQUM7QUFFMUIsU0FBU0MsZ0JBQWdCQSxDQUFDQyxJQUFJLEVBQUU7RUFDOUIsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLEtBQUs7RUFFL0IsSUFBSSxDQUFDSCxrQkFBa0IsQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLENBQUM7RUFDOUI7RUFDQTtFQUNBQSxJQUFJLENBQUNBLElBQUksQ0FBQ0UsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtJQUNqQyxPQUFPLEtBQUs7RUFDZDtFQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUEsU0FBU0Msa0JBQWtC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