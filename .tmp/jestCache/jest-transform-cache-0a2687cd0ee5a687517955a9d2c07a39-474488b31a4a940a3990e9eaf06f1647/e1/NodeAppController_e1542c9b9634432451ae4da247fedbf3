89fda90e5bbc57e37b88f19771c270cd
"use strict";

/* istanbul ignore next */
function cov_29kod4x9qt() {
  var path = "/Users/miguelgarcia/Developer/Knack/Challenge/src/app/controllers/NodeAppController.ts";
  var hash = "9aad0fe2b622973f6aa7459f2d34d7fd68f3dd41";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/miguelgarcia/Developer/Knack/Challenge/src/app/controllers/NodeAppController.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 31
        },
        end: {
          line: 6,
          column: 82
        }
      },
      "4": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 84
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "6": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 75
        }
      },
      "7": {
        start: {
          line: 14,
          column: 30
        },
        end: {
          line: 14,
          column: 74
        }
      },
      "8": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 59
        }
      },
      "9": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 70
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 25
        }
      },
      "12": {
        start: {
          line: 24,
          column: 0
        },
        end: {
          line: 24,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 18
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 11
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9aad0fe2b622973f6aa7459f2d34d7fd68f3dd41"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29kod4x9qt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29kod4x9qt();
var __importDefault =
/* istanbul ignore next */
(cov_29kod4x9qt().s[0]++,
/* istanbul ignore next */
(cov_29kod4x9qt().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_29kod4x9qt().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_29kod4x9qt().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_29kod4x9qt().f[0]++;
  cov_29kod4x9qt().s[1]++;
  return (
    /* istanbul ignore next */
    (cov_29kod4x9qt().b[2][0]++, mod) &&
    /* istanbul ignore next */
    (cov_29kod4x9qt().b[2][1]++, mod.__esModule) ?
    /* istanbul ignore next */
    (cov_29kod4x9qt().b[1][0]++, mod) :
    /* istanbul ignore next */
    (cov_29kod4x9qt().b[1][1]++, {
      "default": mod
    })
  );
}));
/* istanbul ignore next */
cov_29kod4x9qt().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const dependency_injection_1 =
/* istanbul ignore next */
(cov_29kod4x9qt().s[3]++, __importDefault(require("../dependency-injection")));
class NodeAppController {
  constructor() {
    /* istanbul ignore next */
    cov_29kod4x9qt().f[1]++;
    cov_29kod4x9qt().s[4]++;
    this.service = dependency_injection_1.default.get("service.NodeAppService");
  }
  async cleanNodeApp(nodeApp) {
    /* istanbul ignore next */
    cov_29kod4x9qt().f[2]++;
    cov_29kod4x9qt().s[5]++;
    try {
      const origNodeApp =
      /* istanbul ignore next */
      (cov_29kod4x9qt().s[6]++, await this.service.readNodeAppFile(nodeApp));
      const appCleant =
      /* istanbul ignore next */
      (cov_29kod4x9qt().s[7]++, await this.service.cleanNodeApp(origNodeApp));
      /* istanbul ignore next */
      cov_29kod4x9qt().s[8]++;
      await this.service.writeNodeAppFile(appCleant);
      /* istanbul ignore next */
      cov_29kod4x9qt().s[9]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_29kod4x9qt().s[10]++;
      console.error(`ERROR cleaning nodeApp:${error.message}.`);
      /* istanbul ignore next */
      cov_29kod4x9qt().s[11]++;
      return false;
    }
  }
}
/* istanbul ignore next */
cov_29kod4x9qt().s[12]++;
exports.default = NodeAppController;