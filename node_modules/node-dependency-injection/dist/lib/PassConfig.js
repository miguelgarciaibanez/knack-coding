"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PassConfig = /*#__PURE__*/function () {
  function PassConfig() {
    _classCallCheck(this, PassConfig);
  }

  _createClass(PassConfig, null, [{
    key: "TYPE_BEFORE_OPTIMIZATION",
    get:
    /**
     * @returns {string}
     */
    function get() {
      return 'beforeOptimization';
    }
    /**
     * @returns {string}
     */

  }, {
    key: "TYPE_OPTIMIZE",
    get: function get() {
      return 'optimize';
    }
    /**
     * @returns {string}
     */

  }, {
    key: "TYPE_BEFORE_REMOVING",
    get: function get() {
      return 'beforeRemoving';
    }
    /**
     * @returns {string}
     */

  }, {
    key: "TYPE_REMOVE",
    get: function get() {
      return 'remove';
    }
    /**
     * @returns {string}
     */

  }, {
    key: "TYPE_AFTER_REMOVING",
    get: function get() {
      return 'afterRemoving';
    }
    /**
     * @param {string} type
     * @returns {boolean}
     */

  }, {
    key: "isValidType",
    value: function isValidType(type) {
      return this.TYPE_BEFORE_OPTIMIZATION === type || this.TYPE_OPTIMIZE === type || this.TYPE_BEFORE_REMOVING === type || this.TYPE_REMOVE === type || this.TYPE_AFTER_REMOVING === type;
    }
  }]);

  return PassConfig;
}();

exports["default"] = PassConfig;