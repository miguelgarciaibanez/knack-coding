"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Reference = _interopRequireDefault(require("./Reference"));

var _TagReference = _interopRequireDefault(require("./TagReference"));

var _PackageReference = _interopRequireDefault(require("./PackageReference"));

var _PrivateServiceException = _interopRequireDefault(require("./Exception/PrivateServiceException"));

var _ServiceNotFoundException = _interopRequireDefault(require("./Exception/ServiceNotFoundException"));

var _NotAbstractServiceException = _interopRequireDefault(require("./Exception/NotAbstractServiceException"));

var _MethodCallNotFoundException = _interopRequireDefault(require("./Exception/MethodCallNotFoundException"));

var _AbstractServiceException = _interopRequireDefault(require("./Exception/AbstractServiceException"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var InstanceManager = /*#__PURE__*/function () {
  /**
   * @param {ContainerBuilder} containerBuilder
   * @param {Map} definitions
   * @param {Map} alias
   */
  function InstanceManager(containerBuilder, definitions, alias) {
    _classCallCheck(this, InstanceManager);

    this._containerBuilder = containerBuilder;
    this._definitions = definitions;
    this._alias = alias;
  }
  /**
   * @param {string} id
   * @param {boolean} bypassPublic
   * @returns {*}
   */


  _createClass(InstanceManager, [{
    key: "getInstance",
    value: function getInstance(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      id = this._alias.get(id) || id;

      if (id === 'service_container' && this._containerBuilder.containerReferenceAsService) {
        return this._containerBuilder;
      }

      if (this._definitions.has(id)) {
        return this._getInstanceFromId(id, bypassPublic);
      }

      throw new _ServiceNotFoundException["default"](id);
    }
    /**
     * @param {string} id
     * @param {boolean} bypassPublic
     * @returns {*}
     * @private
     */

  }, {
    key: "_getInstanceFromId",
    value: function _getInstanceFromId(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var definition = this._definitions.get(id);

      if (!definition["public"] && !bypassPublic) {
        throw new _PrivateServiceException["default"](id);
      }

      if (definition["abstract"]) {
        throw new _AbstractServiceException["default"](id);
      }

      if (definition.deprecated) {
        this._containerBuilder.logger.warn('DEPRECATED', definition.deprecated);
      }

      if (definition.Object || definition.factory || !definition.Object && definition.synthetic) {
        return this._getExistingInstanceFromId(id, bypassPublic);
      }

      throw new _ServiceNotFoundException["default"](id);
    }
    /**
     * @param {string} id
     * @param {boolean} bypassPublic
     * @returns {*}
     * @private
     */

  }, {
    key: "_getExistingInstanceFromId",
    value: function _getExistingInstanceFromId(id) {
      var bypassPublic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var definition = this._definitions.get(id);

      if (definition.shared === false) {
        return this.getInstanceFromDefinition(definition);
      }

      if (this._containerBuilder.services.has(id) && definition.isPublic(bypassPublic)) {
        return this._containerBuilder.services.get(id);
      }

      var instance = this.getInstanceFromDefinition(definition);

      this._containerBuilder.services.set(id, instance);

      return instance;
    }
    /**
     * @param {Definition} definition
     * @returns {*}
     */

  }, {
    key: "getInstanceFromDefinition",
    value: function getInstanceFromDefinition(definition) {
      if (definition.factory) {
        return this._getInstanceFromFactory(definition);
      }

      if (!definition.synthetic) {
        return this._getNotSyntheticInstanceFromDefinition(definition);
      }
    }
    /**
     * @param {Definition} definition
     * @return {*}
     * @private
     */

  }, {
    key: "_getNotSyntheticInstanceFromDefinition",
    value: function _getNotSyntheticInstanceFromDefinition(definition) {
      var args = this._resolveArguments(definition.args);

      if (definition.parent) {
        args = this._appendParentArgumentsFromDefinition(definition, args);
      }

      var instance = _construct(definition.Object, _toConsumableArray(args));

      var _iterator = _createForOfIteratorHelper(definition.properties),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              value = _step$value[1];

          instance[key] = this._resolveServices(value);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(definition.calls),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var call = _step2.value;

          this._callMethod(instance, call);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return instance;
    }
    /**
     * @param {Definition} definition
     * @returns {*}
     *
     * @private
     */

  }, {
    key: "_getInstanceFromFactory",
    value: function _getInstanceFromFactory(definition) {
      var _definition$factory$O;

      var args = this._resolveArguments(definition.args);

      if (definition.factory.Object instanceof _Reference["default"]) {
        var _factoryService$const;

        var factoryService = this._containerBuilder.get(definition.factory.Object.id);

        return (_factoryService$const = factoryService.constructor)[definition.factory.method].apply(_factoryService$const, _toConsumableArray(args));
      }

      return (_definition$factory$O = definition.factory.Object)[definition.factory.method].apply(_definition$factory$O, _toConsumableArray(args));
    }
    /**
     * @param {Array} args
     * @returns {Array}
     *
     * @private
     */

  }, {
    key: "_resolveArguments",
    value: function _resolveArguments() {
      var _this = this;

      var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var resolvedArgument = [];
      args.forEach(function (argument) {
        resolvedArgument.push(_this._resolveServices(argument));
      });
      return resolvedArgument;
    }
    /**
     * @param {Definition} definition
     * @param {Array} args
     * @return {Array}
     * @private
     */

  }, {
    key: "_appendParentArgumentsFromDefinition",
    value: function _appendParentArgumentsFromDefinition(definition) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var parentDefinition = this._definitions.get(definition.parent);

      if (!parentDefinition["abstract"]) {
        throw new _NotAbstractServiceException["default"](definition.parent);
      }

      return args.concat(this._resolveArguments(parentDefinition.appendArgs));
    }
    /**
     * @param {Reference|PackageReference|*} value
     * @returns {*}
     *
     * @private
     */

  }, {
    key: "_resolveServices",
    value: function _resolveServices(value) {
      if (value instanceof _Reference["default"]) {
        if (!value.nullable || value.nullable && this._containerBuilder.hasDefinition(value.id)) {
          return this.getInstance(value.id, true);
        }
      } else if (value instanceof _PackageReference["default"]) {
        return require(value.id);
      } else if (value instanceof _TagReference["default"]) {
        return this._findTaggedServices(value.name);
      } else {
        return value;
      }

      return null;
    }
  }, {
    key: "_findTaggedServices",
    value: function _findTaggedServices(tagName) {
      var taggedServices = [];

      var _iterator3 = _createForOfIteratorHelper(this._definitions),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
              id = _step3$value[0],
              definition = _step3$value[1];

          if (definition.tags.some(function (tag) {
            return tag.name === tagName;
          })) {
            var serviceInstance = this.getInstance(id);
            taggedServices.push(serviceInstance);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return taggedServices;
    }
    /**
     * @param {*} service
     * @param {{method, args}} call
     *
     * @private
     */

  }, {
    key: "_callMethod",
    value: function _callMethod(service, call) {
      if (typeof service[call.method] !== 'function') {
        throw new _MethodCallNotFoundException["default"](call.method);
      }

      var args = this._resolveArguments(call.args);

      service[call.method].apply(service, _toConsumableArray(args));
    }
  }]);

  return InstanceManager;
}();

exports["default"] = InstanceManager;